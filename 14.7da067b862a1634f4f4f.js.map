{"version":3,"sources":["webpack:///./src/app/modules/organization/setting/manage-feature/manage-feature.component.html","webpack:///./src/app/modules/organization/setting/manage-feature/manage-feature.component.ts","webpack:///./src/app/modules/organization/setting/manage-password-policy/manage-password-policy.component.html","webpack:///./src/app/modules/organization/setting/manage-password-policy/manage-password-policy.component.ts","webpack:///./src/app/modules/organization/setting/setting.module.ts","webpack:///./src/app/modules/organization/setting/setting.routing.ts","webpack:///./src/app/modules/organization/setting/setting.service.ts"],"names":[],"mappings":"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","file":"14.7da067b862a1634f4f4f.js","sourcesContent":["module.exports = \"<div class=\\\"animated fadeIn\\\">\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-6\\\" *ngFor=\\\"let feature of featureList\\\">\\n\\n      <div class=\\\"card\\\">\\n\\n        <div class=\\\"card-header\\\">\\n          <h2 class=\\\"pull-left\\\">{{feature.feature}}</h2>\\n          <div class=\\\"card-header-actions\\\">\\n            <button type=\\\"button\\\" *ngIf=\\\"feature.enabled\\\" class=\\\"btn btn-danger\\\" (click)=\\\"exatask.trackEvent('feature', 'confirmation', feature.feature_code); operationConfirmation(2, feature.feature_code)\\\" [disabled]=\\\"loading[feature.feature_code]\\\">\\n              <span class=\\\"fa fa-spinner\\\" [ngClass]=\\\"{'fa-spin': loading[feature.feature_code]}\\\" *ngIf=\\\"loading[feature.feature_code]\\\"></span>\\n              &nbsp;Disable\\n            </button>\\n            <button type=\\\"button\\\" *ngIf=\\\"!feature.enabled\\\" class=\\\"btn btn-success\\\" (click)=\\\"exatask.trackEvent('feature', 'confirmation', feature.feature_code); operationConfirmation(1, feature.feature_code)\\\" [disabled]=\\\"loading[feature.feature_code]\\\">\\n              <span class=\\\"fa fa-spinner\\\" [ngClass]=\\\"{'fa-spin': loading[feature.feature_code]}\\\" *ngIf=\\\"loading[feature.feature_code]\\\"></span>\\n              &nbsp;Enable\\n            </button>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"card-body\\\">\\n\\n          <dl *ngFor=\\\"let module of feature.modules\\\">\\n            <dt>{{module.module}}</dt>\\n\\n            <ul>\\n              <li *ngFor=\\\"let entity of module.entities\\\">\\n                {{entity.entity}}\\n\\n                <ul>\\n                  <li *ngFor=\\\"let action of entity.actions\\\">{{action.title}}</li>\\n                </ul>\\n\\n              </li>\\n            </ul>\\n\\n          </dl>\\n\\n        </div>\\n\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n</div>\\n\\n<div bsModal #confirmModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\" [ngClass]=\\\"{'modal-success': operation === 1, 'modal-danger': operation === 2}\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\">\\n          <span class=\\\"mb-0\\\" *ngIf=\\\"operation === 1\\\">Confirm enable feature</span>\\n          <span class=\\\"mb-0\\\" *ngIf=\\\"operation === 2\\\">Confirm disable feature</span>\\n        </h4>\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"exatask.trackEvent('feature', 'confirmation', 'close', feature); confirmModal.hide()\\\" aria-label=\\\"Close\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <h5 *ngIf=\\\"operation === 1\\\">Are you sure you would like to enable {{ feature }}?</h5>\\n        <h5 *ngIf=\\\"operation === 2\\\">Are you sure you would like to disable {{ feature }}?</h5>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <button *ngIf=\\\"operation === 1\\\" type=\\\"button\\\" (click)=\\\"exatask.trackEvent('feature', 'enable', feature); enableFeature()\\\" class=\\\"btn btn-success\\\">Enable</button>\\n        <button *ngIf=\\\"operation === 2\\\" type=\\\"button\\\" (click)=\\\"exatask.trackEvent('feature', 'disable', feature); disableFeature()\\\" class=\\\"btn btn-danger\\\">Disable</button>\\n        <button type=\\\"button\\\" (click)=\\\"exatask.trackEvent('feature', 'confirmation', 'cancel', feature); confirmModal.hide()\\\" class=\\\"btn btn-link\\\">Cancel</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<app-success-modal #successModal title=\\\"Success!\\\">\\n  <div content>{{message}}</div>\\n</app-success-modal>\\n\\n<app-error-modal #errorModal title=\\\"Error!\\\">\\n  <div content>{{message}}</div>\\n</app-error-modal>\"","import { Component, OnInit, ViewEncapsulation, ViewChild } from '@angular/core';\n\nimport { SettingService } from 'modules/organization/setting/setting.service';\n\nimport { SuccessModalComponent  } from 'shared/components/success-modal/success-modal.component';\nimport { ErrorModalComponent } from 'shared/components/error-modal/error-modal.component';\nimport { AccessControlService, Module } from 'modules/access-control/access-control.service';\nimport { OrganizationService } from 'modules/organization/organization.service';\nimport { ModalDirective } from 'ngx-bootstrap';\nimport { ExaTask } from '../../../../core/providers/exatask.service';\nimport { find, findIndex, matchesProperty } from 'lodash';\n\nclass Feature {\n\n  feature: string;\n  feature_code: string;\n  entity_ids: string[] = [];\n  modules: Module[] = [];\n  enabled: boolean = false;\n}\n\nenum Operation {\n  ENABLE = 1, DISABLE\n}\n\n@Component({\n  selector: 'app-manage-feature',\n  templateUrl: './manage-feature.component.html',\n  providers: [ SettingService, AccessControlService, OrganizationService ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ManageFeatureComponent implements OnInit {\n  @ViewChild('successModal') successModal: SuccessModalComponent;\n  @ViewChild('errorModal') errorModal: ErrorModalComponent;\n  @ViewChild('confirmModal') confirmModal: ModalDirective;\n\n  featureList: Feature[];\n\n  loading: Array<boolean>;\n  message: string = '';\n\n  feature: string;\n  feature_code: string;\n  operation: Operation = Operation.ENABLE;\n\n  constructor(\n    private settingService: SettingService,\n    private accessControlService: AccessControlService,\n    private organizationService: OrganizationService,\n    public exatask: ExaTask\n  ) {\n\n    this.featureList = new Array<Feature>();\n    this.loading = [];\n    this.exatask.setTitle('Manage Feature');\n  }\n\n  ngOnInit() {\n\n    this.__loadEntities();\n  }\n\n  private __loadEntities() {\n\n    this.accessControlService.getFeatureEntities()\n      .then(response => {\n\n        for (const feature of response) {\n\n          const entity_ids = [];\n          for (const module of feature.modules) {\n            for (const entity of module.entities) {\n              entity_ids.push(entity._id);\n            }\n          }\n\n          const new_feature = new Feature();\n          new_feature.feature = feature.feature;\n          new_feature.feature_code = feature.feature_code;\n          new_feature.entity_ids = entity_ids;\n          new_feature.modules = feature.modules;\n          this.loading[feature.feature_code] = false;\n          this.featureList.push(new_feature);\n        }\n\n        this.__loadOrganization();\n\n      }).catch(err => {\n\n        this.message = err.error.message.text;\n        this.errorModal.show();\n      });\n  }\n\n  private __loadOrganization() {\n\n    this.organizationService.getDetails()\n      .then(response => {\n\n        if (!response.features || !Array.isArray(response.features)) {\n          return;\n        }\n\n        const organization_features = response.features;\n        for (const feature of this.featureList) {\n          for (const entity_id of feature.entity_ids) {\n\n            if (organization_features.indexOf(entity_id) !== -1) {\n              feature.enabled = true;\n            }\n          }\n        }\n\n      }).catch(err => {\n\n        this.message = err.error.message.text;\n        this.errorModal.show();\n      });\n  }\n\n  operationConfirmation(operation, feature_code) {\n\n    this.operation = operation;\n    this.feature_code = feature_code;\n    const feature_details = find(this.featureList, matchesProperty('feature_code', feature_code));\n    this.feature = feature_details.feature;\n    this.confirmModal.show();\n  }\n\n  disableFeature() {\n\n    const self = this;\n    this.confirmModal.hide();\n\n    this.loading[this.feature_code] = true;\n    const index = findIndex(this.featureList, ['feature_code', this.feature_code]);\n    this.settingService.disableFeatures(this.featureList[index].entity_ids)\n      .then(response => {\n\n        this.loading[self.feature_code] = false;\n        this.featureList[index].enabled = false;\n        this.message = response.message.text;\n        this.successModal.show(function () {\n          window.location.reload();\n        });\n\n      }).catch(err => {\n\n        this.loading[self.feature_code] = false;\n        this.message = err.error.message.text;\n        this.errorModal.show();\n      });\n  }\n\n  enableFeature() {\n\n    const self = this;\n    this.confirmModal.hide();\n\n    this.loading[this.feature_code] = true;\n    const index = findIndex(this.featureList, ['feature_code', this.feature_code]);\n    this.settingService.enableFeatures(this.featureList[index].entity_ids)\n      .then(response => {\n\n        this.loading[self.feature_code] = false;\n        this.featureList[index].enabled = true;\n        this.message = response.message.text;\n        this.successModal.show(function () {\n          window.location.reload();\n        });\n\n      }).catch(err => {\n\n        this.loading[self.feature_code] = false;\n        this.message = err.error.message.text;\n        this.errorModal.show();\n      });\n  }\n}\n","module.exports = \"<div class=\\\"animated fadeIn\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n\\n          <form #passwordPolicyForm=\\\"ngForm\\\">\\n            <div class=\\\"form-group row\\\">\\n              <label class=\\\"col-md-4 col-form-label\\\" for=\\\"min-length\\\">Minimum password length</label>\\n              <div class=\\\"col-md-1 col-4\\\">\\n                <input type=\\\"text\\\" name=\\\"min-length\\\" class=\\\"form-control\\\" id=\\\"min-length\\\" [(ngModel)]=\\\"policy.minimum\\\">\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <label class=\\\"col-md-4 col-form-label\\\" for=\\\"max-length\\\">Maximum password length</label>\\n              <div class=\\\"col-md-1 col-4\\\">\\n                <input type=\\\"text\\\" name=\\\"max-length\\\" class=\\\"form-control\\\" id=\\\"max-length\\\" [(ngModel)]=\\\"policy.maximum\\\">\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" name=\\\"lowercase\\\" class=\\\"form-check-input\\\" id=\\\"lowercase\\\" value=\\\"true\\\"\\n                         [(ngModel)]=\\\"policy.lowercase\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"lowercase\\\">Require at-least one lowercase letter</label>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" name=\\\"uppercase\\\" class=\\\"form-check-input\\\" id=\\\"uppercase\\\" value=\\\"true\\\"\\n                         [(ngModel)]=\\\"policy.uppercase\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"uppercase\\\">Require at-least one uppercase letter</label>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" name=\\\"numeric\\\" class=\\\"form-check-input\\\" id=\\\"numeric\\\" value=\\\"true\\\"\\n                         [(ngModel)]=\\\"policy.numeric\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"numeric\\\">Require at-least one number</label>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" name=\\\"special\\\" class=\\\"form-check-input\\\" id=\\\"special\\\" value=\\\"true\\\"\\n                         [(ngModel)]=\\\"policy.special\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"special\\\">Require at-least one non-alphanumeric character</label>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <div class=\\\"col-md-6\\\">\\n\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" name=\\\"expiration\\\" class=\\\"form-check-input\\\" id=\\\"expiration\\\" value=\\\"true\\\"\\n                         [(ngModel)]=\\\"expiration\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"expiration\\\">Enable password expiration</label>\\n                </div>\\n\\n                <div class=\\\"row\\\">\\n                  <label class=\\\"offset-1 col-md-7 col-form-label\\\" for=\\\"expiry\\\">Password expiration period (in days)</label>\\n                  <div class=\\\"offset-1 offset-md-0 col-md-2 col-4\\\">\\n                    <input type=\\\"text\\\" name=\\\"expiry\\\" class=\\\"form-control\\\" id=\\\"expiry\\\" [(ngModel)]=\\\"policy.expiry\\\" [disabled]=\\\"!expiration\\\">\\n                  </div>\\n                </div>\\n\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <div class=\\\"col-md-6\\\">\\n\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" name=\\\"reuse\\\" class=\\\"form-check-input\\\" id=\\\"reuse\\\" value=\\\"true\\\"\\n                         [(ngModel)]=\\\"reuse\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"reuse\\\">Prevent password reuse</label>\\n                </div>\\n\\n                <div class=\\\"row\\\">\\n                  <label class=\\\"offset-1 col-md-7 col-form-label\\\" for=\\\"remember\\\">Number of passwords to remember</label>\\n                  <div class=\\\"offset-1 offset-md-0 col-md-2 col-4\\\">\\n                    <input type=\\\"text\\\" name=\\\"remember\\\" class=\\\"form-control\\\" id=\\\"remember\\\" [(ngModel)]=\\\"policy.remember\\\" [disabled]=\\\"!reuse\\\">\\n                  </div>\\n                </div>\\n\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n              <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" name=\\\"mfa\\\" class=\\\"form-check-input\\\" id=\\\"mfa\\\" value=\\\"true\\\" [(ngModel)]=\\\"policy.mfa\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"mfa\\\">Multi-factor Authentication</label>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-actions row\\\">\\n              <div class=\\\"col-12 text-right\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"exatask.trackEvent('password-policy', 'submit'); savePolicy()\\\">Submit</button>\\n                <a class=\\\"btn btn-link\\\" [routerLink]=\\\"['/dashboard']\\\" (click)=\\\"exatask.trackEvent('password-policy', 'cancel')\\\">Cancel</a>\\n              </div>\\n            </div>\\n          </form>\\n\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<app-success-modal #successModal title=\\\"Success!\\\">\\n  <div content>Password Policy updated successfully</div>\\n</app-success-modal>\\n\\n<app-error-modal #errorModal title=\\\"Error!\\\">\\n<div content>\\n  <p>There was an error updating Password Policy.</p>\\n  <p>{{error}}</p>\\n  <ul>\\n    <li *ngFor=\\\"let attribute of invalid_attributes\\\">{{attribute}}</li>\\n  </ul>\\n</div>\\n</app-error-modal>\"","import { Component, OnInit, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { clone } from 'lodash';\n\nimport { SuccessModalComponent } from 'shared/components/success-modal/success-modal.component';\nimport { ErrorModalComponent } from 'shared/components/error-modal/error-modal.component';\n\nimport { PasswordPolicy, SettingService } from 'modules/organization/setting/setting.service';\nimport { OrganizationService } from 'modules/organization/organization.service';\nimport { ExaTask } from '../../../../core/providers/exatask.service';\n\nconst error_map = {\n  'password_policy.minimum': 'Minimum password length',\n  'password_policy.maximum': 'Maximum password length',\n  'password_policy.expiry': 'Password expiration period',\n  'password_policy.remember': 'Passwords to remember'\n};\n\n@Component({\n  selector: 'app-manage-password-policy',\n  templateUrl: './manage-password-policy.component.html',\n  providers: [SettingService, OrganizationService],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ManagePasswordPolicyComponent implements OnInit {\n  @ViewChild('successModal') successModal: SuccessModalComponent;\n  @ViewChild('errorModal') errorModal: ErrorModalComponent;\n\n  policy: PasswordPolicy = new PasswordPolicy();\n\n  expiration: boolean = false;\n  reuse: boolean = false;\n\n  error: string = '';\n  invalid_attributes: string[];\n\n  constructor(\n    private settingService: SettingService,\n    private organizationService: OrganizationService,\n    public exatask: ExaTask\n  ) {\n    this.exatask.setTitle('Password Policy');\n  }\n\n  async ngOnInit() {\n\n    this.organizationService.getDetails().then(organization => {\n\n      if (organization.password_policy) {\n\n        this.policy = organization.password_policy;\n\n        if (!this.policy.expiry) {\n          this.policy.expiry = undefined;\n        } else {\n          this.expiration = true;\n        }\n\n        if (!this.policy.remember) {\n          this.policy.remember = undefined;\n        } else {\n          this.reuse = true;\n        }\n\n      } else {\n\n        this.policy.minimum = 8;\n        this.policy.maximum = 16;\n      }\n    });\n  }\n\n  private __sanitizePolicy(policy) {\n\n    if (!this.expiration) {\n      policy.expiry = false;\n    }\n    if (!this.reuse) {\n      policy.remember = false;\n    }\n\n    return policy;\n  }\n\n  savePolicy() {\n\n    this.error = '';\n    this.invalid_attributes = [];\n\n    let policy = clone(this.policy);\n    policy = this.__sanitizePolicy(policy);\n\n\n    this.settingService.updatePasswordPolicy(policy)\n      .then(response => {\n\n        this.successModal.show();\n\n      }).catch(err => {\n\n        this.error = err.error.message.text;\n        if (err.error.invalid_attributes) {\n          for (const key in err.error.invalid_attributes) {\n            if (err.error.invalid_attributes.hasOwnProperty(key)) {\n              this.invalid_attributes.push(error_map[key] ? error_map[key] : err.error.invalid_attributes[key]);\n            }\n          }\n        }\n        this.errorModal.show();\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { SettingRoutingModule } from './setting.routing';\nimport { ApplicationComponentsModule } from 'modules/application-components.module';\nimport { ApplicationPipesModule } from 'modules/application-pipes.module';\nimport { ManageFeatureComponent } from './manage-feature/manage-feature.component';\nimport { ManagePasswordPolicyComponent } from './manage-password-policy/manage-password-policy.component';\nimport { ModalModule } from 'ngx-bootstrap';\n\n@NgModule({\n  imports: [\n    SettingRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    CommonModule,\n    ModalModule,\n    ApplicationComponentsModule,\n    ApplicationPipesModule\n  ],\n  declarations: [\n    ManageFeatureComponent,\n    ManagePasswordPolicyComponent\n  ],\n  providers: [\n  ]\n})\nexport class SettingModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthenticationGuard } from 'core/services/authentication.service';\nimport { AuthorizationGuard } from 'core/services/authorization.service';\nimport { ManageFeatureComponent } from './manage-feature/manage-feature.component';\nimport { ManagePasswordPolicyComponent } from './manage-password-policy/manage-password-policy.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    data: {\n      title: 'Setting'\n    },\n    children: [\n      {\n        path: '',\n        redirectTo: 'dashboard'\n      },\n      {\n        path: 'feature',\n        canActivate: [AuthenticationGuard, AuthorizationGuard],\n        data: {\n          title: 'Feature',\n          access: {\n            module: 'organization',\n            entity: 'feature',\n            action: 'enable'\n          }\n        },\n        component: ManageFeatureComponent\n      },\n      {\n        path: 'password-policy',\n        canActivate: [AuthenticationGuard, AuthorizationGuard],\n        data: {\n          title: 'Password Policy',\n          access: {\n            module: 'organization',\n            entity: 'organization',\n            action: 'passwordpolicy'\n          }\n        },\n        component: ManagePasswordPolicyComponent\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { Api } from 'core/services/api.service';\n\nexport class PasswordPolicy {\n\n  minimum: number;\n  maximum: number;\n  lowercase: boolean;\n  uppercase: boolean;\n  numeric: boolean;\n  special: boolean;\n  expiry: number;\n  remember: number;\n  mfa: boolean;\n}\n\n@Injectable()\nexport class SettingService extends Api {\n\n  private _base_url: string = '/organizations';\n  private _feature_base_url: string = '/organizations/features';\n\n  enableFeatures(feature_ids: any) {\n\n    return this.put(this._feature_base_url, { 'features': feature_ids })\n      .then(response => response);\n  }\n\n  disableFeatures(feature_ids: any) {\n\n    return this.delete(this._feature_base_url, { 'features': feature_ids })\n      .then(response => response);\n  }\n\n  updatePasswordPolicy(policy: PasswordPolicy) {\n\n    return this.put(this._base_url + '/passwordpolicy', policy)\n      .then(response => response);\n  }\n}\n"],"sourceRoot":""}